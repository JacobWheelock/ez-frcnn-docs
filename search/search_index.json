{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for EZ-FRCNN: A Fast, Accessible and Robust Deep Learning Package for Object Detection Applications in Ethology and Cell Biology","text":"<p>EZ-FRCNN is a user-friendly implementation of the popular Faster Region-based Convolutional Neural Network (Faster R-CNN) originally developed by Ren et al. This algorithm is designed by biologists for biologists, and is applicable to virtually any dataset! To get started, visit www.ezfrcnn.com or continue reading below.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Easy installation and environment setup for all OSes</li> <li>Jupyter Notebook &amp; full GUI available</li> <li>Simple in-house annotation tools</li> <li>Fast training: around 1 hour on a single GPU for a standard dataset</li> <li>Fast inferencing: around 15 FPS on a single GPU</li> <li>Significant documentation and tutorials for use</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>We provide instructions for installing EZ-FRCNN on Windows or MacOS below. While a GPU is highly recommended to use EZ-FRCNN, it is not required.</p>"},{"location":"#installation-windows","title":"Installation (Windows)","text":"<ol> <li>Install Docker for Windows.</li> <li>Launch Docker Desktop.</li> <li>Download or clone this repository.</li> <li>Extract the contents of the ZIP file downloaded in the last step to a folder of your choice (SKIP if you used <code>git clone</code>).</li> <li>Open the EZ-FRCNN folder and double-click <code>ez-frcnn.bat</code> to launch EZ-FRCNN. OR for a more user-friendly experience, double-click <code>ez-frcnnPane.bat</code> to launch the GUI.</li> </ol>"},{"location":"#installation-macos","title":"Installation (MacOS)","text":"<ol> <li>Navigate to our Mac branch of this repository.</li> <li>Install Docker for MacOS.</li> <li>Launch Docker Desktop.</li> <li>Download or clone the Mac branch of this repository.</li> <li>Extract the contents of the ZIP file downloaded in the last step to a folder of your choice (SKIP if you used <code>git clone</code>).</li> <li>Open the EZ-FRCNN folder, double click <code>ez-frcnn.dmg</code>, and drag the <code>.app</code> file into your current working folder.</li> <li>Double-click <code>ez-frcnn.app</code> to launch EZ-FRCNN. OR for a more user-friendly experience, double-click <code>ez-frcnnPane.dmg</code> to launch the GUI.</li> </ol>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#step-1-annotation-labeling-your-images","title":"Step 1: Annotation - Labeling your Images","text":"<p>Annotation is the process of labeling the objects in your images that you want the model to recognize. This might include specific structures, organisms, or other items you\u2019re interested in identifying. 1. Select Images to Annotate: Before opening the app, place all images you would like to annotate to the <code>ez-frcnn/annotations</code> folder. 2. Select Your Classes: After opening the annotation app, choose the classes (category) you want to annotate. For example, if you\u2019re labeling cells, you can create classes like \u201cnucleus\u201d or \u201ccell membrane.\u201d 3. Draw Bounding Boxes: With your class selected, draw a box around each object in the image that belongs to that class. Repeat this step for each class you want the model to learn. 4. Save Your Annotations: Once all objects in an image are labeled, save your annotations. You\u2019ll repeat these steps for a few images to give the model enough examples to learn from.</p> <p>Tip: Annotation can take a bit of time, but the more images you label, the better your model will perform. Aim for at least 20-50 labeled images to get started.</p>"},{"location":"#step-2-training-teaching-the-model-to-recognize-your-objects","title":"Step 2: Training \u2013 Teaching the Model to Recognize Your Objects","text":"<p>Once your images are annotated, you\u2019re ready to train the model. Training is where the model learns to recognize your labeled objects based on the examples you provided. 1. Training and Validation Sets: During training, your data is split into two sets:     - Training Set: This set is used to teach the model how to recognize your objects.     - Validation Set: This set checks the model\u2019s learning progress on new images it hasn\u2019t seen, helping to ensure it\u2019s generalizing rather than memorizing.</p> <pre><code>Both sets are crucial: the training set helps the model learn, while the validation set ensures that learning applies to new images.\n</code></pre> <ol> <li>Understanding the Loss Curves: During training, you\u2019ll see two curves\u2014 training loss and validation loss. These curves represent how well the model is performing:</li> <li>Training Loss: Shows how well the model is learning on the images it\u2019s trained on.</li> <li>Validation Loss: Indicates how well the model generalizes to new, unseen images.     Ideally, both curves will decrease over time. If validation loss stops decreasing or begins to rise, it can mean the model is overfitting (learning too specifically to the training data), which may require more varied data or adjustments.</li> <li>Finish Training: Once the model completes training, it will be ready to use. <p>Tip: If you have a larger set of annotated images, the model can learn more accurately, but training might take longer. Start with a small set, and as you grow comfortable, you can add more images and retrain.</p> </li> </ol>"},{"location":"#step-3-inference-using-the-model-to-detect-objects-in-new-images","title":"Step 3: Inference \u2013 Using the Model to Detect Objects in New Images","text":"<p>Inference is when the trained model applies what it\u2019s learned to new, unlabeled images. Here, the model will identify and label objects on its own based on the patterns it learned during training. 1. Select New Images: Place new images where you want the model to detect objects automatically into <code>ez-frcnn/test_data/test_images</code>. 2. Run Inference: Select the <code>Run Inference</code> option in EZ-FRCNN. The model will process your images and label objects based on your training. 3. Review the Results: After inference completes, you\u2019ll see boxes around the detected objects in your images, along with confidence scores.    - Confidence Score: This number (from 0 to 1) shows the model\u2019s certainty about each detection, where higher scores mean greater confidence in the label. 5. CSV Output: The tool also generates a CSV file listing each image name, detected object, and the confidence score. This provides a quick overview and easy access to results for further analysis.</p> <p>Tip: If the results aren\u2019t as accurate as you\u2019d like, consider adding more annotations and retraining the model.</p>"},{"location":"#additional-tips-for-success","title":"Additional Tips for Success","text":"<ol> <li>Start Small: Begin with a small number of images and labels. As you gain experience, you can add more data to improve accuracy.</li> <li>Use Clear Images: The clearer and higher quality your images, the better your model will perform.</li> <li>Iterate: Machine learning models improve with iteration. Each round of annotation, training, and inference makes the model a little better!</li> </ol> <p>EZ-FRCNN was built to make machine learning accessible and user-friendly. Follow these steps, experiment, and soon you\u2019ll have a trained model that recognizes your objects of interest with minimal effort!</p>"},{"location":"#references","title":"References","text":"<p>EZ-FRCNN is an implementation of Faster R-CNN, an algorithm developed by Ren et al.</p> <p>Written by Jacob Wheelock and Erin Shappell for Lu Lab, 2025.</p>"},{"location":"annotation/","title":"ez-frcnn.annotation","text":"<pre><code>def annotation.encode_image(filepath):\n</code></pre> <p>Encodes an image file as a base64 string with a data URI prefix.</p> Inputs <p>filepath (str): The path to the image file to be encoded.</p> Output <p>str: A base64-encoded string representation of the image,      prefixed with \"data:image/png;base64,\" for embedding in HTML or CSS.</p> Source code in <code>library/annotation.py</code> <pre><code>def encode_image(filepath):\n    \"\"\"\n    Encodes an image file as a base64 string with a data URI prefix.\n\n    Inputs:\n        filepath (str): The path to the image file to be encoded.\n\n    Output:\n        str: A base64-encoded string representation of the image,\n             prefixed with \"data:image/png;base64,\" for embedding in HTML or CSS.\n\n    \"\"\"\n    with open(filepath, 'rb') as f:\n        image_bytes = f.read()\n    encoded = str(base64.b64encode(image_bytes), 'utf-8')\n    return \"data:image/png;base64,\"+encoded\n</code></pre> <pre><code>def annotation.init_annotations(classes):\n</code></pre> <p>Initializes an interactive image annotation interface using Jupyter widgets.</p> Inputs <p>classes (list of str): A list of class labels that users can assign to bounding boxes.</p> Output <p>VBox: A widget container that includes image display, navigation buttons,       a label, and a progress bar for annotating images in a directory.</p> Source code in <code>library/annotation.py</code> <pre><code>def init_annotations(classes):\n    \"\"\"\n    Initializes an interactive image annotation interface using Jupyter widgets.\n\n    Inputs:\n        classes (list of str): A list of class labels that users can assign to bounding boxes.\n\n    Output:\n        VBox: A widget container that includes image display, navigation buttons,\n              a label, and a progress bar for annotating images in a directory.\n\n    \"\"\"\n    global files, annotations, current_index  # Ensure these are accessible globally\n    path = './annotations/'\n    current_index = 0  # Initialize the index variable\n    annotations = {}\n    image_extensions = ['jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'webp']\n    all_extensions = image_extensions + [ext.upper() for ext in image_extensions]  # Add uppercase versions\n    files = glob.glob(f\"{path}/*.png\")\n    for extension in all_extensions:\n        files.extend(glob.glob(f\"{path}/*.{extension}\"))\n    files = [os.path.basename(image_path) for image_path in files]  # More portable than split('/')\n    if not files:\n        print(\"No images found in the specified directory.\")\n        return\n    im = encode_image(os.path.join(path, files[0]))\n    w_bbox = BBoxWidget(\n        image=im,\n        classes=classes,\n        hide_buttons=True\n    )\n\n    # Initialize the label widget here to update it in the functions\n    label = widgets.Label(value=files[0])\n\n    # Define the function to update the image and label\n    def update_image_and_annotations():\n        nonlocal label  # Indicates that we're using the `label` defined outside this function\n        global current_index\n        if current_index &lt; len(files):\n            image_file = encode_image(os.path.join(path, files[current_index]))\n            w_bbox.image = image_file  # Update the image in the widget\n            w_progress.value = current_index  # Update the progress bar\n            w_progress.description = f\"{current_index + 1} / {len(files)}\"  # Update the progress bar name with index/total\n            label.value = files[current_index]  # Update the label\n        else:\n            print(\"Reached the end of the file list.\")\n\n    def go_back(_):\n        global current_index\n        if current_index &gt; 0:\n            current_index -= 1\n            w_bbox.bboxes = []\n            update_image_and_annotations()\n\n    def skip(_):\n        global current_index\n        if current_index &lt; len(files) - 1:\n            current_index += 1\n            w_bbox.bboxes = []\n            update_image_and_annotations()\n\n\n    def submit(_):\n        global annotations, current_index\n        image_file = files[w_progress.value]\n        path = './annotations/'\n        #print(image_file)\n\n        image = cv2.imread(os.path.join(path, image_file))\n        height, width, _ = image.shape\n        # save annotations for current image\n        annotations[image_file] = w_bbox.bboxes\n        if annotations[image_file]:\n            annotations_for_image = {'annotation': {'object': annotations[image_file]}}\n        else:\n            # No annotations, create a 'background' label with full image bounding box\n            background_annotation = {\n\n                    'x': 0,\n                    'y': 0,\n                    'width': width,\n                    'height': height,\n                    'label':'background'\n\n            }\n            annotations_for_image = {'annotation': {'object': background_annotation}}\n\n        xml_string = xmltodict.unparse(annotations_for_image, pretty=True)\n        with open(path + image_file[:-4] + '.xml', 'w') as f:\n            #json.dump(annotations[image_file], f, indent=4)\n            f.write(xml_string)\n        # move on to the next file\n        skip(_)\n\n    def on_reset_clicked(b):\n        w_bbox.bboxes = []  # Clears the drawn boxes in your widget\n\n    # Connect buttons to their callbacks\n    go_back_button = widgets.Button(description=\"Go Back\", layout=Layout(width='auto'))\n    go_back_button.on_click(go_back)\n\n    skip_button = widgets.Button(description=\"Skip\", layout=Layout(width='auto'))\n    skip_button.on_click(skip)\n\n    reset_button = widgets.Button(description=\"Reset\", layout=Layout(width='auto'))\n    reset_button.on_click(on_reset_clicked)\n\n    submit_button = widgets.Button(description=\"Submit\", layout=Layout(width='auto'))\n    submit_button.on_click(submit)\n\n    # Progress bar to show how far we got\n    # Progress bar to show how far we got, moved slightly to the left using margin\n    w_progress = widgets.IntProgress(\n        value=0, \n        max=len(files)-1, \n        description=f'1 / {len(files)}',\n        layout=widgets.Layout(width='287px', margin='0 0 0 -40px')  # Adjust width and left margin\n    )\n\n\n    # Combine widgets into containers\n    navigation_buttons = widgets.HBox([go_back_button, skip_button, submit_button, reset_button], layout=Layout(margin='0 0 0 3px'))\n    w_progressLabeled = widgets.HBox([w_progress, label])\n\n    w_container = widgets.VBox([\n        w_progressLabeled,\n        navigation_buttons,\n        w_bbox,\n\n    ])\n\n    return w_container\n</code></pre> <pre><code>def annotation.split_images_and_xml(source_folder, train_folder='./images/train/', test_folder='./images/test/', test_ratio=0.1):\n</code></pre> <p>Randomly splits a set of images and corresponding XML annotation files into training and testing folders. Generates individual CSV annotation files for each image based on its XML.</p> Inputs <p>source_folder (str): Folder containing the original image and XML files. train_folder (str):  Destination folder for training images and annotations. Default is './images/train/'. test_folder (str):   Destination folder for testing images and annotations. Default is './images/test/'. test_ratio (float):  Proportion of the dataset to allocate to the test set. Default is 0.1 (10%).</p> Output <p>None</p> Source code in <code>library/annotation.py</code> <pre><code>def split_images_and_xml(source_folder, train_folder='./images/train/', test_folder='./images/test/', test_ratio=0.1):\n    \"\"\"\n    Randomly splits a set of images and corresponding XML annotation files into training and testing folders.\n    Generates individual CSV annotation files for each image based on its XML.\n\n    Inputs:\n        source_folder (str): Folder containing the original image and XML files.\n        train_folder (str):  Destination folder for training images and annotations. Default is './images/train/'.\n        test_folder (str):   Destination folder for testing images and annotations. Default is './images/test/'.\n        test_ratio (float):  Proportion of the dataset to allocate to the test set. Default is 0.1 (10%).\n\n    Output:\n        None\n    \"\"\"\n    # Ensure the train and test folders exist\n    os.makedirs(train_folder, exist_ok=True)\n    os.makedirs(test_folder, exist_ok=True)\n\n    image_extensions = ['jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'webp']\n    all_extensions = image_extensions + [ext.upper() for ext in image_extensions]  # Add uppercase versions\n    # Find all image files in the source folder. .\n    image_files = glob.glob(os.path.join(source_folder, \"*.png\"))\n    path = './annotations'\n    for extension in all_extensions:\n        image_files.extend(glob.glob(f\"{path}/*.{extension}\"))\n\n    # Shuffle the image files to ensure random selection\n    random.shuffle(image_files)\n\n    # Calculate the number of files to allocate to the test set\n    num_test_files = int(len(image_files) * test_ratio)\n\n    # Split the files into training and testing sets\n    test_files = image_files[:num_test_files]\n    train_files = image_files[num_test_files:]\n\n    # Function to convert XML annotations to CSV format\n    def xml_to_csv(xml_file, output_csv_file):\n        with open(xml_file) as xml_fd:\n            annotation_data = xmltodict.parse(xml_fd.read())\n            objects = annotation_data.get('annotation', {}).get('object', [])\n\n            # Handle case if only one object exists (not a list)\n            if not isinstance(objects, list):\n                objects = [objects]\n\n            csv_rows = []\n            for obj in objects:\n                if obj is not None:\n                    class_name = obj['label']\n                    x = obj['x']\n                    y = obj['y']\n                    width = obj['width']\n                    height = obj['height']\n                    csv_rows.append([class_name, x, y, width, height])\n\n            # Convert rows to a pandas DataFrame and save to CSV\n            df = pd.DataFrame(csv_rows, columns=['class', 'xmin', 'ymin', 'xmax', 'ymax'])\n            df.to_csv(output_csv_file, index=False)\n\n    # Copy the files to their respective folders and generate CSV annotations\n    for file_path in test_files:\n        shutil.copy(file_path, test_folder)\n        xml_path = os.path.splitext(file_path)[0] + '.xml'\n        if os.path.exists(xml_path):\n            shutil.copy(xml_path, test_folder)\n            csv_path = os.path.splitext(file_path)[0] + '.csv'\n            xml_to_csv(xml_path, os.path.join(test_folder, os.path.basename(csv_path)))\n\n    for file_path in train_files:\n        shutil.copy(file_path, train_folder)\n        xml_path = os.path.splitext(file_path)[0] + '.xml'\n        if os.path.exists(xml_path):\n            shutil.copy(xml_path, train_folder)\n            csv_path = os.path.splitext(file_path)[0] + '.csv'\n            xml_to_csv(xml_path, os.path.join(source_folder, os.path.basename(csv_path)))\n</code></pre>"},{"location":"characterize/","title":"ez-frcnn.characterize","text":"<pre><code>def characterize.get_subsampled_dataset(full_dataset, num_samples):\n</code></pre> <p>Returns a randomly subsampled subset of a given dataset.</p> Inputs <p>full_dataset (Dataset): A PyTorch-style dataset to sample from. num_samples (int): The number of samples to include in the returned subset.</p> Output <p>Subset: A torch.utils.data.Subset containing <code>num_samples</code> randomly selected items         from the original dataset.</p> Source code in <code>library/characterize.py</code> <pre><code>def get_subsampled_dataset(full_dataset, num_samples):\n    \"\"\"\n    Returns a randomly subsampled subset of a given dataset.\n\n    Inputs:\n        full_dataset (Dataset): A PyTorch-style dataset to sample from.\n        num_samples (int): The number of samples to include in the returned subset.\n\n    Output:\n        Subset: A torch.utils.data.Subset containing `num_samples` randomly selected items\n                from the original dataset.\n\n    \"\"\"\n    indices = np.random.permutation(len(full_dataset))[:num_samples]\n    return Subset(full_dataset, indices)\n</code></pre> <pre><code>def characterize.get_mAP(dataloader, model, device):\n</code></pre> <p>Computes the mean Average Precision (mAP) for a given object detection model on a dataset.</p> Inputs <p>dataloader (DataLoader): A PyTorch DataLoader providing batches of images and targets. model (nn.Module): The object detection model to evaluate. device (torch.device): The device (CPU or GPU) on which to run the model.</p> Output <p>dict: A dictionary containing mAP metrics computed by torchmetrics.MeanAveragePrecision().</p> Source code in <code>library/characterize.py</code> <pre><code>def get_mAP(dataloader, model, device):\n    \"\"\"\n    Computes the mean Average Precision (mAP) for a given object detection model on a dataset.\n\n    Inputs:\n        dataloader (DataLoader): A PyTorch DataLoader providing batches of images and targets.\n        model (nn.Module): The object detection model to evaluate.\n        device (torch.device): The device (CPU or GPU) on which to run the model.\n\n    Output:\n        dict: A dictionary containing mAP metrics computed by torchmetrics.MeanAveragePrecision().\n\n    \"\"\"\n    metric = MeanAveragePrecision()\n    model.eval()\n    model.to(device)\n    # Iterate over the DataLoader\n    for images, targets in dataloader:\n        images = [image.to(device) for image in images]\n        targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n        with torch.no_grad():\n            outputs = model(images)\n\n        # Prepare predictions and targets for torchmetrics\n        preds = []\n        for output in outputs:\n            preds.append({\n                \"boxes\": output['boxes'].cpu(),\n                \"scores\": output['scores'].cpu(),\n                \"labels\": output['labels'].cpu(),\n            })\n\n        tars = []\n        for target in targets:\n            tars.append({\n                \"boxes\": target['boxes'].cpu(),\n                \"labels\": target['labels'].cpu(),\n            })\n\n        # Update the metric with predictions and targets\n        metric.update(preds, tars)\n\n    # Compute the final mAP score\n    mAP = metric.compute()\n    return mAP\n</code></pre> <pre><code>def characterize.run_experiment(full_train_dataset, valid_dataset, num_classes, BATCH_SIZE, NUM_EXPERIMENTS=5, EPOCHS_PER_EXPERIMENT=100, TRIALS_PER_EXPERIMENT=3):\n</code></pre> <p>Runs a series of training experiments with increasing amounts of training data to evaluate model performance.</p> Inputs <p>full_train_dataset (Dataset): The full training dataset to subsample from. valid_dataset (Dataset):      The validation dataset used to compute validation mAP. num_classes (int):            Number of object classes (including background if applicable). BATCH_SIZE (int):             Batch size used for training and validation. NUM_EXPERIMENTS (int):        Number of increasing training set sizes to evaluate. Default is 5. EPOCHS_PER_EXPERIMENT (int):  Number of training epochs per experiment. Default is 100. TRIALS_PER_EXPERIMENT (int):  Number of trials to average per training size. Default is 3.</p> Output <p>list: A list of tuples, each containing (num_samples, mean_mAP, std_mAP) for each experiment.</p> Source code in <code>library/characterize.py</code> <pre><code>def run_experiment(full_train_dataset, valid_dataset, num_classes, BATCH_SIZE, NUM_EXPERIMENTS=5, EPOCHS_PER_EXPERIMENT=100, TRIALS_PER_EXPERIMENT=3):\n    \"\"\"\n    Runs a series of training experiments with increasing amounts of training data to evaluate model performance.\n\n    Inputs:\n        full_train_dataset (Dataset): The full training dataset to subsample from.\n        valid_dataset (Dataset):      The validation dataset used to compute validation mAP.\n        num_classes (int):            Number of object classes (including background if applicable).\n        BATCH_SIZE (int):             Batch size used for training and validation.\n        NUM_EXPERIMENTS (int):        Number of increasing training set sizes to evaluate. Default is 5.\n        EPOCHS_PER_EXPERIMENT (int):  Number of training epochs per experiment. Default is 100.\n        TRIALS_PER_EXPERIMENT (int):  Number of trials to average per training size. Default is 3.\n\n    Output:\n        list: A list of tuples, each containing (num_samples, mean_mAP, std_mAP) for each experiment.\n    \"\"\"\n    # Device configuration\n    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n    metric = MeanAveragePrecision()\n    # Directory setup for models and plots\n    model_dir = 'models/'\n    plot_dir = 'plots/'\n\n    # Calculate number of samples for each experiment\n    total_samples = len(full_train_dataset)\n    split_sizes = np.linspace(0, total_samples, NUM_EXPERIMENTS + 1, dtype=int)[1:]\n\n    results = []\n\n    # Create plot\n    plt.figure()\n    mean_mAPs = []\n    std_mAPs = []\n\n    for num_samples in split_sizes:\n        mAPs = []\n        for trial in range(TRIALS_PER_EXPERIMENT):\n            print(f\"\\nRunning training with {num_samples} samples, trial {trial + 1}...\")\n\n            # Subsample the training dataset\n            train_subset = get_subsampled_dataset(full_train_dataset, num_samples)\n            train_loader, valid_loader = get_loaders(train_subset, valid_dataset, BATCH_SIZE, collate_fn)\n\n            # Initialize a fresh instance of the model\n            model = create_model(num_classes).to(device)\n\n            # Train the model\n            train_model_no_val(model, train_loader, valid_loader, device, 'experiment_model', EPOCHS_PER_EXPERIMENT, model_dir, plot_dir, 10, 10)\n\n            # Evaluate the model\n            val_mAP = get_mAP(valid_loader, model, device)\n            val_mAP = float(val_mAP['map_50'])\n            mAPs.append(val_mAP)\n            print(f\"Trial {trial + 1}: Validation mAP = {val_mAP:.3f}\")\n\n        # Compute statistics\n        mean_mAP = np.mean(mAPs)\n        std_mAP = np.std(mAPs)\n        mean_mAPs.append(mean_mAP)\n        std_mAPs.append(std_mAP)\n        results.append((num_samples, mean_mAP, std_mAP))\n        print(f\"Finished {num_samples} samples: Mean Validation mAP = {mean_mAP:.3f}, Std Dev = {std_mAP:.3f}\")\n\n    # Plotting results\n    plt.errorbar(split_sizes, mean_mAPs, yerr=std_mAPs, fmt='-o', capsize=5)\n    plt.title('Mean and Standard Deviation of Validation mAP')\n    plt.xlabel('Number of Training Samples')\n    plt.ylabel('Validation mAP')\n    plt.grid(True)\n    plt.savefig(f\"{plot_dir}/mAP_results.png\")\n    plt.show()\n\n    return results\n</code></pre>"},{"location":"image_augs/","title":"ez-frcnn.image_augs","text":"<pre><code>def image_augs.get_train_transform():\n</code></pre> <p>Returns a composition of data augmentation transforms for training images and bounding boxes.</p> Inputs <p>None</p> Output <p>albumentations.Compose: A composition of image transformations applied with specified probabilities,                         including flipping, rotation, blurring, and tensor conversion, with bounding                         box support in Pascal VOC format.</p> Source code in <code>library/image_augs.py</code> <pre><code>def get_train_transform():\n    \"\"\"\n    Returns a composition of data augmentation transforms for training images and bounding boxes.\n\n    Inputs:\n        None\n\n    Output:\n        albumentations.Compose: A composition of image transformations applied with specified probabilities,\n                                including flipping, rotation, blurring, and tensor conversion, with bounding\n                                box support in Pascal VOC format.\n    \"\"\"\n    return A.Compose([\n        A.Flip(0.5),\n        A.RandomRotate90(0.5),\n        A.MotionBlur(p=0.2),\n        A.MedianBlur(blur_limit=3, p=0.1),\n        A.Blur(blur_limit=3, p=0.1),\n        ToTensorV2(p=1.0),\n    ], bbox_params={\n        'format': 'pascal_voc',\n        'label_fields': ['labels']\n    })\n</code></pre> <pre><code>def image_augs.get_valid_transform():\n</code></pre> <p>Returns the transformation applied to validation images and bounding boxes.</p> Inputs <p>None</p> Output <p>albumentations.Compose: A composition that converts images and bounding boxes to tensors,                         with bounding box support in Pascal VOC format.</p> Source code in <code>library/image_augs.py</code> <pre><code>def get_valid_transform():\n    \"\"\"\n    Returns the transformation applied to validation images and bounding boxes.\n\n    Inputs:\n        None\n\n    Output:\n        albumentations.Compose: A composition that converts images and bounding boxes to tensors,\n                                with bounding box support in Pascal VOC format.\n    \"\"\"\n    return A.Compose([\n        ToTensorV2(p=1.0),\n    ], bbox_params={\n        'format': 'pascal_voc', \n        'label_fields': ['labels']\n    })\n</code></pre>"},{"location":"inferencing/","title":"ez-frcnn.inferencing","text":"<pre><code>def inferencing.load_model(model_name, MODEL_DIR, NUM_CLASSES):\n</code></pre> <p>Loads a trained model from disk and prepares it for evaluation.</p> Inputs <p>model_name (str):  Filename of the saved model weights. MODEL_DIR (str):   Directory path where the model files are stored. NUM_CLASSES (int): Number of output classes for the model.</p> Output <p>nn.Module: The loaded PyTorch model set to evaluation mode on the appropriate device.</p> Source code in <code>library/inferencing.py</code> <pre><code>def load_model(model_name, MODEL_DIR, NUM_CLASSES):\n    \"\"\"\n    Loads a trained model from disk and prepares it for evaluation.\n\n    Inputs:\n        model_name (str):  Filename of the saved model weights.\n        MODEL_DIR (str):   Directory path where the model files are stored.\n        NUM_CLASSES (int): Number of output classes for the model.\n\n    Output:\n        nn.Module: The loaded PyTorch model set to evaluation mode on the appropriate device.\n    \"\"\"\n    # set the computation device\n    modelPath = './models/' + model_name\n    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n    # load the model and the trained weights\n    model = create_model(num_classes=NUM_CLASSES).to(device)\n    model.load_state_dict(torch.load(\n        modelPath, map_location=device\n    ))\n    model.eval()\n    return model\n</code></pre> <pre><code>def inferencing.saveResultsToCSV(csvFileName, results, OUT_DIR):\n</code></pre> <p>Saves detection results to a CSV file with specified columns.</p> Inputs <p>csvFileName (str):      Name of the CSV file (without extension) to save results. results (list of dict): List of detection result dictionaries containing keys                         'image_name', 'boxes', 'classes', and 'scores'. OUT_DIR (str):          Directory path where the CSV file will be saved.</p> Output <p>None: Writes the results to a CSV file at the specified location.</p> Source code in <code>library/inferencing.py</code> <pre><code>def saveResultsToCSV(csvFileName, results, OUT_DIR):\n    \"\"\"\n    Saves detection results to a CSV file with specified columns.\n\n    Inputs:\n        csvFileName (str):      Name of the CSV file (without extension) to save results.\n        results (list of dict): List of detection result dictionaries containing keys\n                                'image_name', 'boxes', 'classes', and 'scores'.\n        OUT_DIR (str):          Directory path where the CSV file will be saved.\n\n    Output:\n        None: Writes the results to a CSV file at the specified location.\n    \"\"\"\n    csv_path = os.path.join(OUT_DIR, f\"{csvFileName}.csv\")\n\n    # Open CSV file and write the data\n    with open(csv_path, 'w', newline='') as f:\n        writer = csv.writer(f, quoting=csv.QUOTE_ALL)\n        writer.writerow(['Image Name', 'Bounding Boxes', 'Classes', 'Scores'])  # CSV Header\n\n        for result in results:\n            writer.writerow([result['image_name'], result['boxes'], result['classes'], result['scores']])\n</code></pre> <pre><code>def inferencing.inference_video(DIR_TEST, OUT_DIR, vidName, model, detection_threshold, CLASSES, save_detections=False):\n</code></pre> <p>Runs object detection on a video, annotates detected objects frame-by-frame,  optionally saves detected regions, and writes the annotated video to disk.</p> Inputs <p>DIR_TEST (str):                   Path to the input video file for inference. OUT_DIR (str):                    Directory where output video and detected regions (optional) will be saved. vidName (str):                    Filename for the output annotated video. model (torch.nn.Module):          Trained object detection model. detection_threshold (float):      Confidence threshold for filtering detections. CLASSES (list):                   List of class names corresponding to model outputs. save_detections (bool, optional): If True, saves detected bounding box regions as separate images. Default is False.</p> Outputs <p>list: A list containing three elements for all frames:     - bboxes (list): Detected bounding boxes per frame.     - classes (list): Detected class labels per frame.     - sscores (list): Detection scores per frame.</p> Source code in <code>library/inferencing.py</code> <pre><code>def inference_video(DIR_TEST, OUT_DIR, vidName, model, detection_threshold, CLASSES, save_detections=False):\n    \"\"\"\n    Runs object detection on a video, annotates detected objects frame-by-frame, \n    optionally saves detected regions, and writes the annotated video to disk.\n\n    Inputs:\n        DIR_TEST (str):                   Path to the input video file for inference.\n        OUT_DIR (str):                    Directory where output video and detected regions (optional) will be saved.\n        vidName (str):                    Filename for the output annotated video.\n        model (torch.nn.Module):          Trained object detection model.\n        detection_threshold (float):      Confidence threshold for filtering detections.\n        CLASSES (list):                   List of class names corresponding to model outputs.\n        save_detections (bool, optional): If True, saves detected bounding box regions as separate images. Default is False.\n\n    Outputs:\n        list: A list containing three elements for all frames:\n            - bboxes (list): Detected bounding boxes per frame.\n            - classes (list): Detected class labels per frame.\n            - sscores (list): Detection scores per frame.\n    \"\"\"\n    vid = cv2.VideoCapture(DIR_TEST)\n    property_id = int(cv2.CAP_PROP_FRAME_COUNT) \n    NUM_FRAMES = int(cv2.VideoCapture.get(vid, property_id))\n    idx = 1\n    frame_width = int(vid.get(3))\n    frame_height = int(vid.get(4))\n    # Define the codec and create VideoWriter object.The output is stored in 'outpy.avi' file.\n    out = cv2.VideoWriter((OUT_DIR + '/' + vidName),cv2.VideoWriter_fourcc('M','J','P','G'), 30, (frame_width,frame_height))\n    classes = [None] * NUM_FRAMES\n    bboxes = [None] * NUM_FRAMES\n    sscores = [None] * NUM_FRAMES\n\n    while vid.isOpened():\n        ret, image = vid.read()\n\n        orig_image = image.copy()\n        # BGR to RGB\n        image = cv2.cvtColor(orig_image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        # make the pixel range between 0 and 1\n        image /= 255.0\n        # bring color channels to front\n        image = np.transpose(image, (2, 0, 1)).astype(float)\n        # convert to tensor\n        image = torch.tensor(image, dtype=torch.float).cuda()\n        # add batch dimension\n        image = torch.unsqueeze(image, 0)\n        with torch.no_grad():\n            outputs = model(image)\n\n        # load all detection to CPU for further operations\n        outputs = [{k: v.to('cpu') for k, v in t.items()} for t in outputs]\n        # carry further only if there are detected boxes\n        if len(outputs[0]['boxes']) != 0:\n            boxes = outputs[0]['boxes'].data.numpy()\n            scores = outputs[0]['scores'].data.numpy()\n            sscores[idx] = scores\n\n            # filter out boxes according to `detection_threshold`\n            boxes = boxes[scores &gt;= detection_threshold].astype(np.int32)\n            bboxes[idx] = boxes\n            draw_boxes = bboxes[idx].copy() \n\n            # get all the predicited class names\n            pred_classes = [CLASSES[i] for i in outputs[0]['labels'].cpu().numpy()]\n            pred_classes = np.array(pred_classes)\n            pred_classes = pred_classes[scores &gt;= detection_threshold]\n            classes[idx] = pred_classes\n\n            if (save_detections):\n                for j, box in enumerate(draw_boxes):\n                    # Extract and save each detected region\n                    detected_region = orig_image[box[1]:box[3], box[0]:box[2]]\n                    region_save_path = f\"{OUT_DIR}/frame_{idx:04d}_box_{j:02d}.png\"\n                    cv2.imwrite(region_save_path, detected_region)\n            # draw the bounding boxes and write the class name on top of it\n            for j, box in enumerate(draw_boxes):\n                cv2.rectangle(orig_image,\n                            (int(box[0]), int(box[1])),\n                            (int(box[2]), int(box[3])),\n                            (0, 0, 255), 2)\n                cv2.putText(orig_image, str(pred_classes[j]), \n                            (int(box[0]), int(box[1]-5)),\n                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), \n                            2, lineType=cv2.LINE_AA)\n            out.write(orig_image)\n        idx += 1\n        print(f\"Image {idx+1} done...\")\n        print('-'*50)\n        if idx == NUM_FRAMES:\n            vid.release()\n            out.release()\n    print('TEST PREDICTIONS COMPLETE') \n    return [bboxes, classes, sscores]\n</code></pre> <pre><code>def inferencing.inference_images(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, inf_fig):\n</code></pre> <p>Performs object detection on all images in a specified directory, annotates and saves the results,  and records detection details for further analysis.</p> Inputs <p>DIR_TEST (str):              Path to the directory containing input images. model (torch.nn.Module):     Trained object detection model. OUT_DIR (str):               Directory where annotated images and results CSV will be saved. detection_threshold (float): Confidence threshold for filtering detections. CLASSES (list):              List of class names corresponding to model output labels. tqdmBar (callable):          Progress bar function for iterating over images. inf_fig (object):            Visualization object used to display annotated images.</p> Outputs <p>list: A list of dictionaries, each containing:     - 'image_name' (str): Filename of the image.     - 'boxes' (list):     Detected bounding boxes as lists of coordinates.     - 'classes' (list):   Predicted class labels.     - 'scores' (list):    Confidence scores for detections.</p> Source code in <code>library/inferencing.py</code> <pre><code>def inference_images(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, inf_fig):\n    \"\"\"\n    Performs object detection on all images in a specified directory, annotates and saves the results, \n    and records detection details for further analysis.\n\n    Inputs:\n        DIR_TEST (str):              Path to the directory containing input images.\n        model (torch.nn.Module):     Trained object detection model.\n        OUT_DIR (str):               Directory where annotated images and results CSV will be saved.\n        detection_threshold (float): Confidence threshold for filtering detections.\n        CLASSES (list):              List of class names corresponding to model output labels.\n        tqdmBar (callable):          Progress bar function for iterating over images.\n        inf_fig (object):            Visualization object used to display annotated images.\n\n    Outputs:\n        list: A list of dictionaries, each containing:\n            - 'image_name' (str): Filename of the image.\n            - 'boxes' (list):     Detected bounding boxes as lists of coordinates.\n            - 'classes' (list):   Predicted class labels.\n            - 'scores' (list):    Confidence scores for detections.\n    \"\"\"\n    imagePath = glob.glob(f\"{DIR_TEST}/*.png\")\n    image_extensions = ['jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'webp', 'tif']\n    all_extensions = image_extensions + [ext.upper() for ext in image_extensions]  # Add uppercase versions\n    for extension in all_extensions:\n            imagePath.extend(glob.glob(f\"{DIR_TEST}/*.{extension}\"))\n    all_images = [image_path.split('/')[-1] for image_path in imagePath]\n    all_images = sorted(all_images)\n    num_images = len(all_images)\n    classes = [None] * num_images\n    bboxes = [None] * num_images\n    sscores = [None] * num_images\n    # List to store results for CSV\n    results = []\n    for idx in tqdmBar(range(0,num_images)):\n        el = all_images[idx]\n        orig_image = cv2.imread(DIR_TEST + '/' + el)\n        # BGR to RGB\n        image = cv2.cvtColor(orig_image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        # make the pixel range between 0 and 1\n        image /= 255.0\n        # bring color channels to front\n        image = np.transpose(image, (2, 0, 1)).astype(float)\n        # convert to tensor\n        if torch.cuda.is_available():\n            image = torch.tensor(image, dtype=torch.float).cuda()\n        else:\n            image = torch.tensor(image, dtype=torch.float)\n        # add batch dimension\n        image = torch.unsqueeze(image, 0)\n        with torch.no_grad():\n            outputs = model(image)\n\n        # load all detection to CPU for further operations\n        outputs = [{k: v.to('cpu') for k, v in t.items()} for t in outputs]\n        # carry further only if there are detected boxes\n        if len(outputs[0]['boxes']) != 0:\n            boxes = outputs[0]['boxes'].data.numpy()\n            scores = outputs[0]['scores'].data.numpy()\n            sscores[idx] = scores[scores &gt;= detection_threshold]\n\n            # filter out boxes according to `detection_threshold`\n            boxes = boxes[scores &gt;= detection_threshold].astype(np.int32)\n            bboxes[idx] = boxes\n            draw_boxes = bboxes[idx].copy() \n\n            # get all the predicited class names\n            pred_classes = [CLASSES[i] for i in outputs[0]['labels'].cpu().numpy()]\n            pred_classes = np.array(pred_classes)\n            pred_classes = pred_classes[scores &gt;= detection_threshold]\n            classes[idx] = pred_classes\n            # Store results for this image in the list\n            results.append({\n                'image_name': el,\n                'boxes': boxes.tolist(),\n                'classes': pred_classes.tolist(),\n                'scores': sscores[idx].tolist()\n            })\n            # draw the bounding boxes and write the class name on top of it\n            fig, ax = plt.subplots(1, figsize=(4,4))\n            ax.axis('off')\n            orig_image_rgb = cv2.cvtColor(orig_image, cv2.COLOR_BGR2RGB)\n            plt.tight_layout()\n            ax.imshow(orig_image_rgb)\n\n            inf_fig.object = fig\n            for j, box in enumerate(draw_boxes):\n                cv2.rectangle(orig_image_rgb,\n                            (int(box[0]), int(box[1])),\n                            (int(box[2]), int(box[3])),\n                            (255, 0, 0), 5)\n                cv2.putText(orig_image_rgb, str(pred_classes[j]), \n                            (int(box[0]), int(box[1]-5)),\n                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), \n                            2, lineType=cv2.LINE_AA)\n            writeOut = cv2.cvtColor(orig_image_rgb, cv2.COLOR_RGB2BGR)\n            cv2.imwrite(OUT_DIR + '/' + el, writeOut) #The 'el' filepath is broken right now (TODO: FIX) \n            ax.axis('off')  # Remove the axis for cleaner visualization\n            plt.tight_layout()\n            ax.imshow(orig_image_rgb)\n            # Update the inf_fig pane with the new figure\n            inf_fig.object = fig\n            plt.close()\n        #print(f\"Image {idx+1} done...\")\n        #print('-'*50)\n\n    saveResultsToCSV('inference_results', results, OUT_DIR)\n    print('TEST PREDICTIONS COMPLETE') \n    return results\n</code></pre> <pre><code>def inferencing.load_and_preprocess_image(file_path, target_size=(800, 800)):\n</code></pre> <p>Loads an image from disk, resizes it to a target size, converts it to RGB, normalizes pixel values, and transforms it into a PyTorch tensor suitable for model input.</p> Inputs <p>file_path (str):     Path to the input image file. target_size (tuple): Desired output image size as (width, height). Default is (800, 800).</p> Outputs <p>tuple: A tuple containing:     - image_tensor (torch.Tensor): Preprocessed image tensor of shape (3, target_height, target_width).     - filename (str):              The basename of the input image file.     - original_size (tuple):       Original image dimensions as (width, height).</p> Source code in <code>library/inferencing.py</code> <pre><code>def load_and_preprocess_image(file_path, target_size=(800, 800)):\n    \"\"\"\n    Loads an image from disk, resizes it to a target size, converts it to RGB, normalizes pixel values,\n    and transforms it into a PyTorch tensor suitable for model input.\n\n    Inputs:\n        file_path (str):     Path to the input image file.\n        target_size (tuple): Desired output image size as (width, height). Default is (800, 800).\n\n    Outputs:\n        tuple: A tuple containing:\n            - image_tensor (torch.Tensor): Preprocessed image tensor of shape (3, target_height, target_width).\n            - filename (str):              The basename of the input image file.\n            - original_size (tuple):       Original image dimensions as (width, height).\n    \"\"\"\n    orig_image = cv2.imread(file_path)\n    orig_height, orig_width = orig_image.shape[:2]\n    resized_image = cv2.resize(orig_image, target_size)  # Resize to fixed size\n    image_rgb = cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB).astype(np.float32) / 255.0\n    image_tensor = torch.tensor(np.transpose(image_rgb, (2, 0, 1)), dtype=torch.float)\n    return image_tensor, os.path.basename(file_path), (orig_width, orig_height)\n</code></pre> <pre><code>def inferencing.scale_boxes_to_original(boxes, original_size, resized_size=(800, 800)):\n</code></pre> <p>Scales bounding box coordinates from a resized image back to the original image dimensions.</p> Inputs <p>boxes (array-like):    Array of bounding boxes with coordinates [x_min, y_min, x_max, y_max]                         relative to the resized image. original_size (tuple): Original image size as (width, height). resized_size (tuple):  Resized image size as (width, height). Default is (800, 800).</p> Outputs <p>numpy.ndarray: Array of bounding boxes scaled to the original image size.</p> Source code in <code>library/inferencing.py</code> <pre><code>def scale_boxes_to_original(boxes, original_size, resized_size=(800, 800)):\n    \"\"\"\n    Scales bounding box coordinates from a resized image back to the original image dimensions.\n\n    Inputs:\n        boxes (array-like):    Array of bounding boxes with coordinates [x_min, y_min, x_max, y_max] \n                               relative to the resized image.\n        original_size (tuple): Original image size as (width, height).\n        resized_size (tuple):  Resized image size as (width, height). Default is (800, 800).\n\n    Outputs:\n        numpy.ndarray: Array of bounding boxes scaled to the original image size.\n    \"\"\"\n    orig_width, orig_height = original_size\n    resized_width, resized_height = resized_size\n    x_scale = orig_width / resized_width\n    y_scale = orig_height / resized_height\n    scaled_boxes = []\n    for box in boxes:\n        x_min, y_min, x_max, y_max = box\n        scaled_boxes.append([\n            x_min * x_scale, y_min * y_scale,\n            x_max * x_scale, y_max * y_scale\n        ])\n    return np.array(scaled_boxes)\n</code></pre> <pre><code>def inferencing.inference_images_fast(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, batch_size=4):\n</code></pre> <p>Performs batch inference on images in a directory using the provided model, with optional GPU acceleration.</p> Inputs <p>DIR_TEST (str):              Directory path containing images for inference. model (torch.nn.Module):     Trained object detection model. OUT_DIR (str):               Directory path to save inference results. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list):              List of class names corresponding to model labels. tqdmBar (iterable):          Progress bar iterator for displaying progress. batch_size (int, optional):  Number of images to process per batch. Default is 4.</p> Outputs <p>list of dict: Each dict contains image filename, bounding boxes (scaled to original image size),                predicted classes, and detection scores for that image.</p> Source code in <code>library/inferencing.py</code> <pre><code>def inference_images_fast(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES, tqdmBar, batch_size=4):\n    \"\"\"\n    Performs batch inference on images in a directory using the provided model, with optional GPU acceleration.\n\n    Inputs:\n        DIR_TEST (str):              Directory path containing images for inference.\n        model (torch.nn.Module):     Trained object detection model.\n        OUT_DIR (str):               Directory path to save inference results.\n        detection_threshold (float): Minimum confidence score to consider a detection valid.\n        CLASSES (list):              List of class names corresponding to model labels.\n        tqdmBar (iterable):          Progress bar iterator for displaying progress.\n        batch_size (int, optional):  Number of images to process per batch. Default is 4.\n\n    Outputs:\n        list of dict: Each dict contains image filename, bounding boxes (scaled to original image size), \n                      predicted classes, and detection scores for that image.\n    \"\"\"\n    # Collect all image paths\n    image_extensions = ['png', 'jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'webp']\n    all_image_paths = []\n    for ext in image_extensions + [ext.upper() for ext in image_extensions]:\n        all_image_paths.extend(glob.glob(f\"{DIR_TEST}/*.{ext}\"))\n    all_image_paths = sorted(all_image_paths)\n\n    # Prepare results list for annotations\n    results = []\n\n    # Device setup\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    model.to(device)\n    model.eval()\n\n    # Process images in batches\n    with ThreadPoolExecutor() as executor:\n        for start_idx in tqdmBar(range(0, len(all_image_paths), batch_size), desc=\"Inference Progress\"):\n            # Load images in parallel\n            batch_paths = all_image_paths[start_idx:start_idx + batch_size]\n            batch_data = list(executor.map(load_and_preprocess_image, batch_paths))\n\n            # Separate image tensors and filenames\n            images, filenames, original_sizes = zip(*batch_data)\n            images = torch.stack(images).to(device)\n\n            # Run inference\n            with torch.no_grad():\n                outputs = model(images)\n\n            # Process each image output\n            for i, output in enumerate(outputs):\n                scores = output['scores'].cpu().numpy()\n                boxes = output['boxes'][scores &gt;= detection_threshold].cpu().numpy()\n                labels = output['labels'][scores &gt;= detection_threshold].cpu().numpy()\n\n                # Scale boxes back to original image size\n                orig_size = original_sizes[i]\n                scaled_boxes = scale_boxes_to_original(boxes, orig_size)\n\n                # Store annotation results\n                pred_classes = [CLASSES[label] for label in labels]\n                result = {\n                    'image_name': filenames[i],\n                    'boxes': scaled_boxes.tolist(),\n                    'classes': pred_classes,\n                    'scores': scores[scores &gt;= detection_threshold].tolist()\n                }\n                results.append(result)\n\n    # Save results to JSON or CSV\n    saveResultsToCSV('inference_results', results, OUT_DIR)\n    print('TEST PREDICTIONS COMPLETE')\n\n    return results\n</code></pre> <pre><code>def inferencing.inference_images_figs(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES):\n</code></pre> <p>Performs inference on images in a directory using the given model, annotates detected objects with bounding boxes  and class labels, and overlays enlarged views of detected regions on the original images. Saves annotated images with  bounding boxes and enlarged detected regions overlaid to OUT_DIR.</p> Inputs <p>DIR_TEST (str):              Directory path containing input images. model (torch.nn.Module):     Trained object detection model. OUT_DIR (str):               Directory path to save annotated output images. detection_threshold (float): Minimum confidence score to consider a detection valid. CLASSES (list):              List of class names corresponding to model output labels.</p> Outputs <p>list: A list containing three elements:     - bboxes (list):  Detected bounding boxes per image.     - classes (list): Predicted class labels per image.     - sscores (list): Detection scores per image.</p> Source code in <code>library/inferencing.py</code> <pre><code>def inference_images_figs(DIR_TEST, model, OUT_DIR, detection_threshold, CLASSES):\n    \"\"\"\n    Performs inference on images in a directory using the given model, annotates detected objects with bounding boxes \n    and class labels, and overlays enlarged views of detected regions on the original images. Saves annotated images with \n    bounding boxes and enlarged detected regions overlaid to OUT_DIR.\n\n    Inputs:\n        DIR_TEST (str):              Directory path containing input images.\n        model (torch.nn.Module):     Trained object detection model.\n        OUT_DIR (str):               Directory path to save annotated output images.\n        detection_threshold (float): Minimum confidence score to consider a detection valid.\n        CLASSES (list):              List of class names corresponding to model output labels.\n\n    Outputs:\n        list: A list containing three elements:\n            - bboxes (list):  Detected bounding boxes per image.\n            - classes (list): Predicted class labels per image.\n            - sscores (list): Detection scores per image.\n\n    \"\"\"\n    imagePath = glob.glob(f\"{DIR_TEST}/*.png\")\n    image_extensions = ['jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'webp', 'tif']\n    all_extensions = image_extensions + [ext.upper() for ext in image_extensions]  # Add uppercase versions\n    for extension in all_extensions:\n        imagePath.extend(glob.glob(f\"{DIR_TEST}/*.{extension}\"))\n\n    all_images = [image_path.split('/')[-1] for image_path in imagePath]\n    all_images = sorted(all_images)\n    num_images = len(all_images)\n    classes = [None] * num_images\n    bboxes = [None] * num_images\n    sscores = [None] * num_images\n\n    for idx, el in enumerate(all_images):\n        orig_image = cv2.imread(DIR_TEST + '/' + el)\n        # BGR to RGB\n        image = cv2.cvtColor(orig_image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        # Normalize the pixel values (between 0 and 1)\n        image /= 255.0\n        # Rearrange color channels\n        image = np.transpose(image, (2, 0, 1)).astype(float)\n        # Convert to tensor\n        image_tensor = torch.tensor(image, dtype=torch.float).cuda() if torch.cuda.is_available() else torch.tensor(image, dtype=torch.float)\n        # Add batch dimension\n        image_tensor = torch.unsqueeze(image_tensor, 0)\n\n        with torch.no_grad():\n            outputs = model(image_tensor)\n\n        outputs = [{k: v.to('cpu') for k, v in t.items()} for t in outputs]\n\n        if len(outputs[0]['boxes']) != 0:\n            boxes = outputs[0]['boxes'].data.numpy()\n            scores = outputs[0]['scores'].data.numpy()\n            sscores[idx] = scores[scores &gt;= detection_threshold]\n            boxes = boxes[scores &gt;= detection_threshold].astype(np.int32)\n            bboxes[idx] = boxes\n            draw_boxes = boxes.copy() \n\n            pred_classes = [CLASSES[i] for i in outputs[0]['labels'].cpu().numpy()]\n            pred_classes = np.array(pred_classes)\n            pred_classes = pred_classes[scores &gt;= detection_threshold]\n            classes[idx] = pred_classes\n\n            for j, box in enumerate(draw_boxes):\n                x1, y1, x2, y2 = box\n                cv2.rectangle(orig_image, (x1, y1), (x2, y2), (0, 0, 255), 2)\n                cv2.putText(orig_image, str(pred_classes[j]), (x1, y1 - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)\n\n                # Extract and enlarge the detected region\n                detected_img = orig_image[y1:y2, x1:x2]\n                factor = 2  # Change factor to desired zoom\n                enlarged_img = cv2.resize(detected_img, None, fx=factor, fy=factor, interpolation=cv2.INTER_LINEAR)\n\n                # Calculate where to place the enlarged image on the original\n                eh, ew, _ = enlarged_img.shape\n                ex, ey = 10, 10  # Starting coordinates for the enlarged image (top left)\n\n                # Ensure the enlarged image does not go out of the bounds of the original image\n                if ey + eh &gt; orig_image.shape[0]:\n                    ey = orig_image.shape[0] - eh\n                if ex + ew &gt; orig_image.shape[1]:\n                    ex = orig_image.shape[1] - ew\n\n                # Overlay the enlarged image on the original image\n                orig_image[ey:ey+eh, ex:ex+ew] = enlarged_img\n\n                # Draw lines connecting the small and enlarged boxes\n                cv2.line(orig_image, (x1, y1), (ex, ey), (255, 0, 0), 2)\n                cv2.line(orig_image, (x2, y2), (ex + ew, ey + eh), (255, 0, 0), 2)\n\n            cv2.imwrite(OUT_DIR + '/' + el, orig_image)  # Save the modified image\n\n        print(f\"Image {idx+1} done...\")\n        print('-'*50)\n\n    print('TEST PREDICTIONS COMPLETE') \n    return [bboxes, classes, sscores]\n</code></pre>"},{"location":"plotting/","title":"ez-frcnn.plotting","text":"<pre><code>def plotting.visualize_sample(TRAIN_DIR, RESIZE_TO, index):\n</code></pre> <p>Visualizes a single sample image with annotated bounding boxes and class labels from a dataset.</p> Inputs <p>TRAIN_DIR (str): Directory path containing training images and annotations. RESIZE_TO (int): Size (width and height) to which images are resized. index (int):     Index of the sample image in the dataset to visualize.</p> Outputs <p>matplotlib.figure.Figure: Figure object displaying the image with bounding boxes and labels.</p> Source code in <code>library/plotting.py</code> <pre><code>def visualize_sample(TRAIN_DIR, RESIZE_TO, index):\n    \"\"\"\n    Visualizes a single sample image with annotated bounding boxes and class labels from a dataset.\n\n    Inputs:\n        TRAIN_DIR (str): Directory path containing training images and annotations.\n        RESIZE_TO (int): Size (width and height) to which images are resized.\n        index (int):     Index of the sample image in the dataset to visualize.\n\n    Outputs:\n        matplotlib.figure.Figure: Figure object displaying the image with bounding boxes and labels.\n\n    \"\"\"\n    dataset = getDataset(\n        TRAIN_DIR, RESIZE_TO, RESIZE_TO\n    )\n\n    image, target = dataset[index]\n    fig = plt.figure(figsize=(4, 4))\n    ax = fig.subplots()\n    ax.axis('off')  # This hides both the axes and the ticks\n    plt.tight_layout()  # This automatically adjusts the padding\n\n    for i in range(0,len(target['boxes'])):\n        box = target['boxes'][i]\n        classesBG = dataset.classes\n        label = classesBG[target['labels'][i].item()]\n\n        cv2.rectangle(\n            image, \n            (int(box[0]), int(box[1])), (int(box[2]), int(box[3])),\n            (0, 255, 0), 1\n            )\n        cv2.putText(\n            image, label, (int(box[0]), int(box[1]-5)), \n            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2\n            )\n    plt.imshow(image)\n    return fig\n</code></pre>"},{"location":"training/","title":"ez-frcnn.training","text":"<pre><code>def training.create_model(num_classes):\n</code></pre> <p>Creates a Faster R-CNN model pre-trained on COCO and modifies its head for a custom number of classes.</p> Inputs <p>num_classes (int): Number of output classes for detection (including background).</p> Outputs <p>torchvision.models.detection.FasterRCNN: The modified Faster R-CNN model ready for training or inference.</p> Source code in <code>library/training.py</code> <pre><code>def create_model(num_classes):\n    \"\"\"\n    Creates a Faster R-CNN model pre-trained on COCO and modifies its head for a custom number of classes.\n\n    Inputs:\n        num_classes (int): Number of output classes for detection (including background).\n\n    Outputs:\n        torchvision.models.detection.FasterRCNN: The modified Faster R-CNN model ready for training or inference.\n    \"\"\"\n    # load Faster RCNN pre-trained model\n    model = torchvision.models.detection.fasterrcnn_resnet50_fpn_v2(weights='COCO_V1')\n\n    # get the number of input features \n    in_features = model.roi_heads.box_predictor.cls_score.in_features\n    # define a new head for the detector with required number of classes\n    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes) \n    return model\n</code></pre> <pre><code>def training.load_model_train(model_name, MODEL_DIR, NUM_CLASSES):\n</code></pre> <p>Loads a trained model for inference or further training.</p> Inputs <p>model_name (str):  Filename of the saved model weights. MODEL_DIR (str):   Directory where the model weights are stored. NUM_CLASSES (int): Number of output classes the model predicts.</p> Outputs <p>torch.nn.Module: The model loaded with trained weights, moved to the appropriate device (CPU or GPU).</p> Source code in <code>library/training.py</code> <pre><code>def load_model_train(model_name, MODEL_DIR, NUM_CLASSES):\n    \"\"\"\n    Loads a trained model for inference or further training.\n\n    Inputs:\n        model_name (str):  Filename of the saved model weights.\n        MODEL_DIR (str):   Directory where the model weights are stored.\n        NUM_CLASSES (int): Number of output classes the model predicts.\n\n    Outputs:\n        torch.nn.Module: The model loaded with trained weights, moved to the appropriate device (CPU or GPU).\n    \"\"\"\n    # set the computation device\n    modelPath = './models/' + model_name\n    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n    # load the model and the trained weights\n    model = create_model(num_classes=NUM_CLASSES).to(device)\n    model.load_state_dict(torch.load(\n        modelPath, map_location=device\n    ))\n    return model\n</code></pre> <pre><code>def training.train(train_data_loader, model, optimizer, train_loss_list, train_loss_hist, train_itr, DEVICE):\n</code></pre> <p>Performs one epoch of training on the provided model.</p> Inputs <p>train_data_loader (DataLoader):    Iterable over training dataset batches. model (torch.nn.Module):           The model to train. optimizer (torch.optim.Optimizer): Optimizer used for updating model weights. train_loss_list (list):            List to store loss values per iteration. train_loss_hist (generator):       Generator to track or log loss history. train_itr (int):                   Current training iteration count. DEVICE (torch.device):             Device (CPU or GPU) to perform computations on.</p> Outputs <p>train_loss_list (list): Updated list of training loss values.</p> Source code in <code>library/training.py</code> <pre><code>def train(train_data_loader, model, optimizer, train_loss_list, train_loss_hist, train_itr, DEVICE):\n    \"\"\"\n    Performs one epoch of training on the provided model.\n\n    Inputs:\n        train_data_loader (DataLoader):    Iterable over training dataset batches.\n        model (torch.nn.Module):           The model to train.\n        optimizer (torch.optim.Optimizer): Optimizer used for updating model weights.\n        train_loss_list (list):            List to store loss values per iteration.\n        train_loss_hist (generator):       Generator to track or log loss history.\n        train_itr (int):                   Current training iteration count.\n        DEVICE (torch.device):             Device (CPU or GPU) to perform computations on.\n\n    Outputs:\n        train_loss_list (list): Updated list of training loss values.\n    \"\"\"\n    print('Training')\n    #global train_itr\n\n     # initialize tqdm progress bar\n    #prog_bar = Tqdm(train_data_loader, total=len(train_data_loader))\n\n    for i, data in enumerate(train_data_loader):\n        optimizer.zero_grad()\n        images, targets = data\n\n        images = list(image.to(DEVICE) for image in images)\n        targets = [{k: v.to(DEVICE) for k, v in t.items()} for t in targets]\n        loss_dict = model(images, targets)\n        losses = sum(loss for loss in loss_dict.values())\n        loss_value = losses.item()\n        train_loss_list.append(loss_value)\n        train_loss_hist.send(loss_value)\n        losses.backward()\n        optimizer.step()\n        train_itr += 1\n\n        # update the loss value beside the progress bar for each iteration\n        #prog_bar.set_description(desc=f\"Loss: {loss_value:.4f}\")\n    return train_loss_list\n</code></pre> <pre><code>def training.validate(valid_data_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE):\n</code></pre> <p>Performs one epoch of validation on the provided model.</p> Inputs <p>valid_data_loader (DataLoader): Iterable over validation dataset batches. model (torch.nn.Module):   The model to validate. val_loss_list (list):      List to store validation loss values per iteration. val_loss_hist (generator): Generator to track or log validation loss history. val_itr (int):             Current validation iteration count. DEVICE (torch.device):     Device (CPU or GPU) to perform computations on.</p> Outputs <p>val_loss_list (list): Updated list of validation loss values.</p> Source code in <code>library/training.py</code> <pre><code>def validate(valid_data_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE):\n    \"\"\"\n    Performs one epoch of validation on the provided model.\n\n    Inputs:\n        valid_data_loader (DataLoader): Iterable over validation dataset batches.\n        model (torch.nn.Module):   The model to validate.\n        val_loss_list (list):      List to store validation loss values per iteration.\n        val_loss_hist (generator): Generator to track or log validation loss history.\n        val_itr (int):             Current validation iteration count.\n        DEVICE (torch.device):     Device (CPU or GPU) to perform computations on.\n\n    Outputs:\n        val_loss_list (list): Updated list of validation loss values.\n    \"\"\"\n    print('Validating')\n    #global val_itr\n\n    # initialize tqdm progress bar\n    #prog_bar = tqdm(valid_data_loader, total=len(valid_data_loader))\n\n    for i, data in enumerate(valid_data_loader):\n        images, targets = data\n\n        images = list(image.to(DEVICE) for image in images)\n        targets = [{k: v.to(DEVICE) for k, v in t.items()} for t in targets]\n\n        with torch.no_grad():\n            loss_dict = model(images, targets)\n        losses = sum(loss for loss in loss_dict.values())\n        loss_value = losses.item()\n        val_loss_list.append(loss_value)\n        val_loss_hist.send(loss_value)\n        val_itr += 1\n        # update the loss value beside the progress bar for each iteration\n        #prog_bar.set_description(desc=f\"Loss: {loss_value:.4f}\")\n    return val_loss_list\n</code></pre> <pre><code>def training.train_model(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH, tqdm_all, train_loss_mpl):\n</code></pre> <p>Train a given PyTorch model with training and validation datasets,  periodically saving model checkpoints and loss plots.</p> Inputs <p>model (torch.nn.Module):       The model to train. train_loader (DataLoader):     DataLoader for training dataset. valid_loader (DataLoader):     DataLoader for validation dataset. DEVICE (torch.device):         Device on which to run training (CPU or GPU). MODEL_NAME (str):              Base name for saving model checkpoints. NUM_EPOCHS (int):              Total number of epochs for training. OUT_DIR (str):                 Directory to save model checkpoints. PLOT_DIR (str):                Directory to save training/validation loss plots. SAVE_MODEL_EPOCH (int):        Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int):        Frequency (in epochs) to save the loss plots. tqdm_all (iterable):           Iterable (e.g., tqdm wrapper) for epoch iteration. train_loss_mpl (Panel object): Matplotlib figure holder for live loss plot updates.</p> Output <p>list: A list containing two elements:     - train_loss_list: Loss values for all training iterations.     - val_loss_list:   Loss values for all validation iterations.</p> Source code in <code>library/training.py</code> <pre><code>def train_model(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH, tqdm_all, train_loss_mpl):\n    \"\"\"\n    Train a given PyTorch model with training and validation datasets, \n    periodically saving model checkpoints and loss plots.\n\n    Inputs:\n        model (torch.nn.Module):       The model to train.\n        train_loader (DataLoader):     DataLoader for training dataset.\n        valid_loader (DataLoader):     DataLoader for validation dataset.\n        DEVICE (torch.device):         Device on which to run training (CPU or GPU).\n        MODEL_NAME (str):              Base name for saving model checkpoints.\n        NUM_EPOCHS (int):              Total number of epochs for training.\n        OUT_DIR (str):                 Directory to save model checkpoints.\n        PLOT_DIR (str):                Directory to save training/validation loss plots.\n        SAVE_MODEL_EPOCH (int):        Frequency (in epochs) to save the model.\n        SAVE_PLOTS_EPOCH (int):        Frequency (in epochs) to save the loss plots.\n        tqdm_all (iterable):           Iterable (e.g., tqdm wrapper) for epoch iteration.\n        train_loss_mpl (Panel object): Matplotlib figure holder for live loss plot updates.\n\n    Output:\n        list: A list containing two elements:\n            - train_loss_list: Loss values for all training iterations.\n            - val_loss_list:   Loss values for all validation iterations.\n    \"\"\"\n    model = model.to(DEVICE)\n    # get the model parameters\n    params = [p for p in model.parameters() if p.requires_grad]\n    # define the optimizer\n    optimizer = torch.optim.SGD(params, lr=0.001, momentum=0.9, weight_decay=0.0005)\n    # initialize the Averager class\n    train_loss_hist = Averager()\n    val_loss_hist = Averager()\n    train_itr = 1\n    val_itr = 1\n    # train and validation loss lists to store loss values of all...\n    # ... iterations till ena and plot graphs for all iterations\n    train_loss_list = []\n    train_loss_plot_list = []\n    val_loss_list = []\n    val_loss_plot_list = []\n    for epoch, data in enumerate(tqdm_all):\n        print(f\"\\nEPOCH {epoch+1} of {NUM_EPOCHS}\")\n        # reset the training and validation loss histories for the current epoch\n        train_loss_hist.reset()\n        val_loss_hist.reset()\n        # create two subplots, one for each, training and validation\n        figure_1, train_ax = plt.subplots()\n        figure_2, valid_ax = plt.subplots()\n        figure, ax = plt.subplots(figsize=(4, 4))  # Make the figure smaller (6x4 inches)\n        # start timer and carry out training and validation\n        start = time.time()\n        train_loss = train(train_loader, model, optimizer, train_loss_list, train_loss_hist, train_itr, DEVICE)\n        val_loss = validate(valid_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE)\n        print(f\"Epoch #{epoch} train loss: {train_loss_hist.value:.3f}\")   \n        print(f\"Epoch #{epoch} validation loss: {val_loss_hist.value:.3f}\")   \n        end = time.time()\n        print(f\"Took {((end - start) / 60):.3f} minutes for epoch {epoch}\")\n        if (epoch+1) % SAVE_MODEL_EPOCH == 0: # save model after every n epochs\n            torch.save(model.state_dict(), f\"{OUT_DIR}/{MODEL_NAME}{epoch+1}.pth\")\n            print('SAVING MODEL COMPLETE...\\n')\n\n        if (epoch+1) % SAVE_PLOTS_EPOCH == 0: # save loss plots after n epochs\n            train_ax.plot(train_loss, color='blue')\n            train_ax.set_xlabel('iterations')\n            train_ax.set_ylabel('train loss')\n            valid_ax.plot(val_loss, color='red')\n            valid_ax.set_xlabel('iterations')\n            valid_ax.set_ylabel('validation loss')\n            # Calculate the average training and validation loss for this epoch\n            avg_train_loss = train_loss_hist.value\n            avg_val_loss = val_loss_hist.value\n\n            # Append the average loss to a list to store epoch-wise loss values\n            train_loss_plot_list.append(avg_train_loss)\n            val_loss_plot_list.append(avg_val_loss)\n             # Validation loss is plotted after every epoch, so scale its x-axis based on epochs\n            #validation_x_scale = [(i + 1) * len(train_loader) for i in range(len(val_loss))]  # Scale for validation intervals\n            # Generate x-values for validation loss so it scales with the train loss\n            # Generate x-axis values representing the epoch numbers\n            epochs = range(1, len(train_loss_plot_list) + 1)\n\n            # Plot training and validation loss averages per epoch\n            ax.plot(epochs,train_loss_plot_list, label='Average Training Loss', color='blue', marker='o')\n            ax.plot(epochs,val_loss_plot_list, label='Average Validation Loss', color='red', marker='o')\n\n            # Set labels and add legend\n            ax.set_xlabel('Epochs')\n            ax.set_ylabel('Average Loss')\n            ax.legend(loc='upper right')\n\n            # Apply tight layout\n            plt.tight_layout()\n            # Update the Matplotlib object in Panel to show the figure\n            train_loss_mpl.object = figure\n\n            #train_loss_mpl.object = figure_1\n            figure_1.savefig(f\"{PLOT_DIR}/train_loss_{epoch+1}.png\")\n            figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\")\n            print('SAVING PLOTS COMPLETE...')\n\n        if (epoch+1) == NUM_EPOCHS: # save loss plots and model once at the end\n            train_ax.plot(train_loss, color='blue')\n            train_ax.set_xlabel('iterations')\n            train_ax.set_ylabel('train loss')\n            valid_ax.plot(val_loss, color='red')\n            valid_ax.set_xlabel('iterations')\n            valid_ax.set_ylabel('validation loss')\n            figure_1.savefig(f\"{PLOT_DIR}/train_loss_{epoch+1}.png\")\n            figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\")\n            torch.save(model.state_dict(), f\"{OUT_DIR}/model{epoch+1}.pth\")\n\n        plt.close('all')\n    return [train_loss_list, val_loss_list]\n</code></pre> <pre><code>def training.train_model_no_val(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH):\n</code></pre> <p>Train a PyTorch model using only the training dataset, without validation.</p> Inputs <p>model (torch.nn.Module):   The model to train. train_loader (DataLoader): DataLoader for training dataset. valid_loader (DataLoader): DataLoader for validation dataset (unused). DEVICE (torch.device):     Device for training (CPU or GPU). MODEL_NAME (str):          Base filename for saving model checkpoints. NUM_EPOCHS (int):          Number of training epochs. OUT_DIR (str):             Directory to save model checkpoints. PLOT_DIR (str):            Directory to save training loss plots. SAVE_MODEL_EPOCH (int):    Frequency (in epochs) to save the model. SAVE_PLOTS_EPOCH (int):    Frequency (in epochs) to save training loss plots.</p> Output <p>list: A list containing two elements:     - train_loss_list: Loss values for all training iterations.     - val_loss_list:   Empty list (validation losses not tracked).</p> Source code in <code>library/training.py</code> <pre><code>def train_model_no_val(model, train_loader, valid_loader, DEVICE, MODEL_NAME, NUM_EPOCHS, OUT_DIR, PLOT_DIR, SAVE_MODEL_EPOCH, SAVE_PLOTS_EPOCH):\n    \"\"\"\n    Train a PyTorch model using only the training dataset, without validation.\n\n    Inputs:\n        model (torch.nn.Module):   The model to train.\n        train_loader (DataLoader): DataLoader for training dataset.\n        valid_loader (DataLoader): DataLoader for validation dataset (unused).\n        DEVICE (torch.device):     Device for training (CPU or GPU).\n        MODEL_NAME (str):          Base filename for saving model checkpoints.\n        NUM_EPOCHS (int):          Number of training epochs.\n        OUT_DIR (str):             Directory to save model checkpoints.\n        PLOT_DIR (str):            Directory to save training loss plots.\n        SAVE_MODEL_EPOCH (int):    Frequency (in epochs) to save the model.\n        SAVE_PLOTS_EPOCH (int):    Frequency (in epochs) to save training loss plots.\n\n    Output:\n        list: A list containing two elements:\n            - train_loss_list: Loss values for all training iterations.\n            - val_loss_list:   Empty list (validation losses not tracked).\n    \"\"\"\n    model = model.to(DEVICE)\n    # get the model parameters\n    params = [p for p in model.parameters() if p.requires_grad]\n    # define the optimizer\n    optimizer = torch.optim.SGD(params, lr=0.001, momentum=0.9, weight_decay=0.0005)\n    # initialize the Averager class\n    train_loss_hist = Averager()\n    val_loss_hist = Averager()\n    train_itr = 1\n    val_itr = 1\n    # train and validation loss lists to store loss values of all...\n    # ... iterations till ena and plot graphs for all iterations\n    train_loss_list = []\n    val_loss_list = []\n    for epoch in range(NUM_EPOCHS):\n        print(f\"\\nEPOCH {epoch+1} of {NUM_EPOCHS}\")\n        # reset the training and validation loss histories for the current epoch\n        train_loss_hist.reset()\n        #val_loss_hist.reset()\n        # create two subplots, one for each, training and validation\n        figure_1, train_ax = plt.subplots()\n        #figure_2, valid_ax = plt.subplots()\n        # start timer and carry out training and validation\n        start = time.time()\n        train_loss = train(train_loader, model, optimizer, train_loss_list, train_loss_hist, train_itr, DEVICE)\n        #val_loss = validate(valid_loader, model, val_loss_list, val_loss_hist, val_itr, DEVICE)\n        print(f\"Epoch #{epoch} train loss: {train_loss_hist.value:.3f}\")   \n        #print(f\"Epoch #{epoch} validation loss: {val_loss_hist.value:.3f}\")   \n        end = time.time()\n        print(f\"Took {((end - start) / 60):.3f} minutes for epoch {epoch}\")\n        if (epoch+1) % SAVE_MODEL_EPOCH == 0: # save model after every n epochs\n            torch.save(model.state_dict(), f\"{OUT_DIR}/{MODEL_NAME}{epoch+1}.pth\")\n            print('SAVING MODEL COMPLETE...\\n')\n\n        if (epoch+1) % SAVE_PLOTS_EPOCH == 0: # save loss plots after n epochs\n            train_ax.plot(train_loss, color='blue')\n            train_ax.set_xlabel('iterations')\n            train_ax.set_ylabel('train loss')\n            #valid_ax.plot(val_loss, color='red')\n            #valid_ax.set_xlabel('iterations')\n            #valid_ax.set_ylabel('validation loss')\n            figure_1.savefig(f\"{PLOT_DIR}/train_loss_{epoch+1}.png\")\n            #figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\")\n            print('SAVING PLOTS COMPLETE...')\n\n        if (epoch+1) == NUM_EPOCHS: # save loss plots and model once at the end\n            train_ax.plot(train_loss, color='blue')\n            train_ax.set_xlabel('iterations')\n            train_ax.set_ylabel('train loss')\n            #valid_ax.plot(val_loss, color='red')\n            #valid_ax.set_xlabel('iterations')\n            #valid_ax.set_ylabel('validation loss')\n            figure_1.savefig(f\"{PLOT_DIR}/train_loss_{epoch+1}.png\")\n            #figure_2.savefig(f\"{PLOT_DIR}/valid_loss_{epoch+1}.png\")\n            torch.save(model.state_dict(), f\"{OUT_DIR}/model{epoch+1}.pth\")\n\n        plt.close('all')\n    return [train_loss_list, val_loss_list]\n</code></pre> <pre><code>class Averager:\n</code></pre> <p>Utility class to compute and maintain the running average of numeric values.</p> <p>Methods:</p> Name Description <code>send</code> <p>Add a new value to the running total and increment count.</p> <code>value </code> <p>Returns the current average of all values received.</p> <code>reset</code> <p>Resets the total and count to start a new average calculation.</p> Source code in <code>library/training.py</code> <pre><code>class Averager:\n    \"\"\"\n    Utility class to compute and maintain the running average of numeric values.\n\n    Methods:\n        send(value):      Add a new value to the running total and increment count.\n        value (property): Returns the current average of all values received.\n        reset():          Resets the total and count to start a new average calculation.\n    \"\"\"\n    def __init__(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n\n    def send(self, value):\n        self.current_total += value\n        self.iterations += 1\n\n    @property\n    def value(self):\n        if self.iterations == 0:\n            return 0\n        else:\n            return 1.0 * self.current_total / self.iterations\n\n    def reset(self):\n        self.current_total = 0.0\n        self.iterations = 0.0\n</code></pre>"},{"location":"utils/","title":"ez-frcnn.utils","text":"<pre><code>def utils.collate_fn(batch):\n</code></pre> <p>Custom collate function to merge a list of samples into a batch.</p> Inputs <p>batch (list): List of samples, where each sample is a tuple of data elements.</p> Output <p>tuple: Tuple of tuples, where each inner tuple contains all elements        of a given type from the batch (e.g., images, targets).</p> Source code in <code>library/utils.py</code> <pre><code>def collate_fn(batch):\n    \"\"\"\n    Custom collate function to merge a list of samples into a batch.\n\n    Inputs:\n        batch (list): List of samples, where each sample is a tuple of data elements.\n\n    Output:\n        tuple: Tuple of tuples, where each inner tuple contains all elements\n               of a given type from the batch (e.g., images, targets).\n\n    \"\"\"\n    return tuple(zip(*batch))\n</code></pre> <pre><code>def utils.get_loaders(train_dataset, valid_dataset, BATCH_SIZE, collate_fn):\n</code></pre> <p>Create DataLoader objects for training and validation datasets.</p> Inputs <p>train_dataset (Dataset): PyTorch Dataset object for training data. valid_dataset (Dataset): PyTorch Dataset object for validation data. BATCH_SIZE (int):        Number of samples per batch to load. collate_fn (callable):   Function to merge a list of samples into a mini-batch, used for handling variable-size inputs.</p> Output <p>list: A list containing two DataLoader objects:       - train_loader: DataLoader for the training dataset with shuffling enabled.       - valid_loader: DataLoader for the validation dataset without shuffling.</p> Source code in <code>library/utils.py</code> <pre><code>def get_loaders(train_dataset, valid_dataset, BATCH_SIZE, collate_fn):\n    \"\"\"\n    Create DataLoader objects for training and validation datasets.\n\n    Inputs:\n        train_dataset (Dataset): PyTorch Dataset object for training data.\n        valid_dataset (Dataset): PyTorch Dataset object for validation data.\n        BATCH_SIZE (int):        Number of samples per batch to load.\n        collate_fn (callable):   Function to merge a list of samples into a mini-batch, used for handling variable-size inputs.\n\n    Output:\n        list: A list containing two DataLoader objects:\n              - train_loader: DataLoader for the training dataset with shuffling enabled.\n              - valid_loader: DataLoader for the validation dataset without shuffling.\n\n    \"\"\"\n    train_loader = DataLoader(\n    train_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=True,\n    num_workers=0,\n    collate_fn=collate_fn\n    )\n    valid_loader = DataLoader(\n    valid_dataset,\n    batch_size=BATCH_SIZE,\n    shuffle=False,\n    num_workers=0,\n    collate_fn=collate_fn\n    )\n    return [train_loader, valid_loader]\n</code></pre> <pre><code>class utils.getDataset(Dataset):\n</code></pre> <p>               Bases: <code>Dataset</code></p> <p>Custom PyTorch Dataset for loading images and corresponding bounding box annotations from a directory containing image files and Pascal VOC-style XML annotation files.</p> <p>Attributes:</p> Name Type Description <code>dir_path</code> <code>str</code> <p>Directory path containing images and XML annotation files.</p> <code>width</code> <code>int</code> <p>Desired image width after resizing.</p> <code>height</code> <code>int</code> <p>Desired image height after resizing.</p> <code>transforms</code> <code>callable</code> <p>Optional transformations to be applied on the images and bounding boxes.</p> <code>classes</code> <code>list</code> <p>List of unique class names parsed from annotation XML files, with 'background' as the first class.</p> <code>all_images</code> <code>list</code> <p>Sorted list of image filenames in the dataset directory.</p> <p>Methods:</p> Name Description <code>get_classes_from_annotations</code> <p>Parses XML annotation files to extract all unique classes.</p> <code>__getitem__</code> <p>Loads and processes the image and its annotations at index <code>idx</code>. Applies resizing and optional transformations. Returns the processed image tensor and target dictionary with bounding boxes and labels.</p> <code>__len__</code> <p>Returns the total number of images in the dataset.</p> Usage <p>dataset = getDataset(dir_path='path/to/data', width=224, height=224, transforms=transform_function) image, target = dataset[0]</p> Source code in <code>library/utils.py</code> <pre><code>class getDataset(Dataset):\n    \"\"\"\n    Custom PyTorch Dataset for loading images and corresponding bounding box annotations\n    from a directory containing image files and Pascal VOC-style XML annotation files.\n\n    Attributes:\n        dir_path (str):                  Directory path containing images and XML annotation files.\n        width (int):                     Desired image width after resizing.\n        height (int):                    Desired image height after resizing.\n        transforms (callable, optional): Optional transformations to be applied on the images and bounding boxes.\n        classes (list):                  List of unique class names parsed from annotation XML files, with 'background' as the first class.\n        all_images (list):               Sorted list of image filenames in the dataset directory.\n\n    Methods:\n        get_classes_from_annotations():\n            Parses XML annotation files to extract all unique classes.\n\n        __getitem__(idx):\n            Loads and processes the image and its annotations at index `idx`.\n            Applies resizing and optional transformations.\n            Returns the processed image tensor and target dictionary with bounding boxes and labels.\n\n        __len__():\n            Returns the total number of images in the dataset.\n\n    Usage:\n        dataset = getDataset(dir_path='path/to/data', width=224, height=224, transforms=transform_function)\n        image, target = dataset[0]\n\n    \"\"\"\n    def __init__(self, dir_path, width, height, transforms=None):\n        self.transforms = transforms\n        self.dir_path = dir_path\n        self.height = height\n        self.width = width\n        self.classes = self.get_classes_from_annotations()\n\n\n        image_extensions = ['jpg', 'jpeg', 'gif', 'bmp', 'tiff', 'webp', 'tif']\n        all_extensions = image_extensions + [ext.upper() for ext in image_extensions]  # Add uppercase versions\n        self.image_paths = glob.glob(f\"{self.dir_path}/*.png\")\n        for extension in all_extensions:\n            self.image_paths.extend(glob.glob(f\"{self.dir_path}/*.{extension}\"))\n        # Extract just the filenames\n        self.all_images = [os.path.basename(image_path) for image_path in self.image_paths]\n\n        self.all_images = sorted(self.all_images)\n\n    def get_classes_from_annotations(self):\n        \"\"\"\n        Parse all XML files in the dataset directory to build a list of unique classes.\n        \"\"\"\n        classes = set()\n        xml_files = glob.glob(f\"{self.dir_path}/*.xml\")\n        for xml_file in xml_files:\n            tree = et.parse(xml_file)\n            root = tree.getroot()\n            for member in root.findall('object'):\n                try:\n                    class_name = member.find('class').text\n                except:\n                    class_name = member.find('label').text\n                classes.add(class_name)\n\n        # Add 'background' as the first class and sort the rest alphabetically\n        return ['background'] + sorted(classes)\n\n    def __getitem__(self, idx):\n        # capture the image name and the full image path\n        image_name = self.all_images[idx]\n        #print(image_name)\n        image_path = os.path.join(self.dir_path, image_name)\n        #print(image_path)\n        # read the image\n        image = cv2.imread(image_path)\n        # convert BGR to RGB color format\n        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB).astype(np.float32)\n        image_resized = cv2.resize(image, (self.width, self.height))\n        image_resized /= 255.0\n        af = image_name.split('.')\n        # capture the corresponding XML file for getting the annotations\n        annot_filename = af[0] + '.xml'\n\n        annot_file_path = self.dir_path + '/' + annot_filename\n\n        boxes = []\n        labels = []\n        tree = et.parse(annot_file_path)\n\n        root = tree.getroot()\n\n        # get the height and width of the image\n        image_width = image.shape[1]\n        image_height = image.shape[0]\n\n\n        # box coordinates for xml files are extracted and corrected for image size given\n        for member in root.findall('object'):\n            # map the current object name to `classes` list to get...\n            # ... the label index and append to `labels` list\n            try:\n                labels.append(self.classes.index(member.find('class').text))\n            except:\n                labels.append(self.classes.index(member.find('label').text))\n            try:\n                # xmin = left corner x-coordinates\n                xmin = int(member.find('xmin').text)\n            except:\n                # xmin = left corner x-coordinates\n                xmin = int(member.find('x').text)    \n            try:\n                # xmax = right corner x-coordinates\n                xmax = int(member.find('xmax').text)\n            except:\n                # xmax = right corner x-coordinates\n                xmax = xmin + int(member.find('width').text)  \n            try:\n                # ymin = left corner y-coordinates\n                ymin = int(member.find('ymin').text)\n            except:\n                # xmin = left corner y-coordinates\n                ymin = int(member.find('y').text)   \n            try:\n                # ymax = right corner x-coordinates\n                ymax = int(member.find('ymax').text)\n            except:\n                # xmin = left corner y-coordinates\n                ymax = ymin + int(member.find('height').text)   \n\n            # resize the bounding boxes according to the...\n            # ... desired `width`, `height`\n            xmin_final = (xmin/image_width)*self.width\n            xmax_final = (xmax/image_width)*self.width\n            ymin_final = (ymin/image_height)*self.height\n            ymax_final = (ymax/image_height)*self.height\n\n            boxes.append([xmin_final, ymin_final, xmax_final, ymax_final])\n\n        # bounding box to tensor\n\n        boxes = torch.as_tensor(boxes, dtype=torch.float32)\n        # area of the bounding boxes\n        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n        # no crowd instances\n        iscrowd = torch.zeros((boxes.shape[0],), dtype=torch.int64)\n        # labels to tensor\n        labels = torch.as_tensor(labels, dtype=torch.int64)\n        # prepare the final `target` dictionary\n        target = {}\n        target[\"boxes\"] = boxes\n        target[\"labels\"] = labels\n        target[\"area\"] = area\n        target[\"iscrowd\"] = iscrowd\n        image_id = torch.tensor([idx])\n        target[\"image_id\"] = image_id\n        # apply the image transforms\n        if self.transforms:\n            sample = self.transforms(image = image_resized,\n                                     bboxes = target['boxes'],\n                                     labels = labels)\n            image_resized = sample['image']\n            target['boxes'] = torch.Tensor(sample['bboxes'])\n\n        return image_resized, target\n    def __len__(self):\n        return len(self.all_images)\n</code></pre>"},{"location":"utils/#library.utils.getDataset.get_classes_from_annotations","title":"<code>get_classes_from_annotations()</code>","text":"<p>Parse all XML files in the dataset directory to build a list of unique classes.</p> Source code in <code>library/utils.py</code> <pre><code>def get_classes_from_annotations(self):\n    \"\"\"\n    Parse all XML files in the dataset directory to build a list of unique classes.\n    \"\"\"\n    classes = set()\n    xml_files = glob.glob(f\"{self.dir_path}/*.xml\")\n    for xml_file in xml_files:\n        tree = et.parse(xml_file)\n        root = tree.getroot()\n        for member in root.findall('object'):\n            try:\n                class_name = member.find('class').text\n            except:\n                class_name = member.find('label').text\n            classes.add(class_name)\n\n    # Add 'background' as the first class and sort the rest alphabetically\n    return ['background'] + sorted(classes)\n</code></pre>"}]}